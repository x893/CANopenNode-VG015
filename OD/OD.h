/*******************************************************************************
    CANopen Object Dictionary definition for CANopenNode V4

    This file was automatically generated by CANopenEditor da8409a-dirty+da8409a60d4fcb997a85ffd2c672744b7f600cec

    https://github.com/CANopenNode/CANopenNode
    https://github.com/CANopenNode/CANopenEditor

    DON'T EDIT THIS FILE MANUALLY !!!!
********************************************************************************

    File info:
        File Names:   OD.h; OD.c
        Project File: CANbp.xdd
        File Version: 1

        Created:      09.04.2024 12:05:16
        Created By:   
        Modified:     11.07.2025 13:54:59
        Modified By:  

    Device Info:
        Vendor Name:  ioot_pro
        Vendor ID:    ASUP
        Product Name: CANbp
        Product ID:   1

        Description:  301,401
*******************************************************************************/

#ifndef OD_H
#define OD_H
/*******************************************************************************
    Counters of OD objects
*******************************************************************************/
#define OD_CNT_NMT 1
#define OD_CNT_EM 1
#define OD_CNT_SYNC 1
#define OD_CNT_SYNC_PROD 1
#define OD_CNT_STORAGE 1
#define OD_CNT_TIME 1
#define OD_CNT_EM_PROD 1
#define OD_CNT_HB_CONS 1
#define OD_CNT_HB_PROD 1
#define OD_CNT_SDO_SRV 1
#define OD_CNT_RPDO 7
#define OD_CNT_TPDO 4


/*******************************************************************************
    Sizes of OD arrays
*******************************************************************************/
#define OD_CNT_ARR_1003 16
#define OD_CNT_ARR_1010 4
#define OD_CNT_ARR_1011 4
#define OD_CNT_ARR_1016 8
#define OD_CNT_ARR_2000 8
#define OD_CNT_ARR_2300 8
#define OD_CNT_ARR_2301 8
#define OD_CNT_ARR_2302 8
#define OD_CNT_ARR_2303 8
#define OD_CNT_ARR_2304 8
#define OD_CNT_ARR_2305 8
#define OD_CNT_ARR_4002 8
#define OD_CNT_ARR_4004 8
#define OD_CNT_ARR_4201 8
#define OD_CNT_ARR_4203 8
#define OD_CNT_ARR_4401 16
#define OD_CNT_ARR_4402 16
#define OD_CNT_ARR_4403 16
#define OD_CNT_ARR_4501 4
#define OD_CNT_ARR_4502 16
#define OD_CNT_ARR_4503 16
#define OD_CNT_ARR_4504 16
#define OD_CNT_ARR_4510 16
#define OD_CNT_ARR_5000 8
#define OD_CNT_ARR_5006 8
#define OD_CNT_ARR_5007 8
#define OD_CNT_ARR_5008 8
#define OD_CNT_ARR_5100 8
#define OD_CNT_ARR_5101 8
#define OD_CNT_ARR_5102 8
#define OD_CNT_ARR_5103 8
#define OD_CNT_ARR_5201 8
#define OD_CNT_ARR_5202 8
#define OD_CNT_ARR_5203 8
#define OD_CNT_ARR_5204 8
#define OD_CNT_ARR_5205 8
#define OD_CNT_ARR_5301 8
#define OD_CNT_ARR_5302 8
#define OD_CNT_ARR_5303 8
#define OD_CNT_ARR_5304 8
#define OD_CNT_ARR_5401 24
#define OD_CNT_ARR_5402 24
#define OD_CNT_ARR_5403 24
#define OD_CNT_ARR_5404 24
#define OD_CNT_ARR_5405 24
#define OD_CNT_ARR_5406 24
#define OD_CNT_ARR_6000 8
#define OD_CNT_ARR_6002 8
#define OD_CNT_ARR_6003 8
#define OD_CNT_ARR_6006 8
#define OD_CNT_ARR_6007 8
#define OD_CNT_ARR_6008 8
#define OD_CNT_ARR_6100 4
#define OD_CNT_ARR_6200 8
#define OD_CNT_ARR_6202 8
#define OD_CNT_ARR_6206 8
#define OD_CNT_ARR_6207 8
#define OD_CNT_ARR_6208 8
#define OD_CNT_ARR_6401 16
#define OD_CNT_ARR_6402 4
#define OD_CNT_ARR_6411 4
#define OD_CNT_ARR_6421 8
#define OD_CNT_ARR_6424 16
#define OD_CNT_ARR_6425 16
#define OD_CNT_ARR_6426 16
#define OD_CNT_ARR_6427 16
#define OD_CNT_ARR_6428 16
#define OD_CNT_ARR_6429 4
#define OD_CNT_ARR_6431 16
#define OD_CNT_ARR_6443 8
#define OD_CNT_ARR_6444 8
#define OD_CNT_ARR_A040 8
#define OD_CNT_ARR_A4C0 8


/*******************************************************************************
    OD data declaration of all groups
*******************************************************************************/
typedef struct {
    uint32_t x1000_deviceType;
    uint32_t x1005_COB_ID_SYNCMessage;
    uint32_t x1006_communicationCyclePeriod;
    uint32_t x1007_synchronousWindowLength;
    char x1008_manufacturerDeviceName[16];
    char x100A_manufacturerSoftwareVersion[16];
    uint32_t x1012_COB_IDTimeStampObject;
    uint32_t x1014_COB_ID_EMCY;
    uint16_t x1015_inhibitTimeEMCY;
    uint8_t x1016_consumerHeartbeatTime_sub0;
    uint32_t x1016_consumerHeartbeatTime[OD_CNT_ARR_1016];
    uint16_t x1017_producerHeartbeatTime;
    struct {
        uint8_t highestSub_indexSupported;
        uint32_t vendor_ID;
        uint32_t productCode;
        uint32_t revisionNumber;
        uint32_t serialNumber;
    } x1018_identity;
    uint8_t x1019_synchronousCounterOverflowValue;
    struct {
        uint8_t highestSub_indexSupported;
        uint32_t COB_IDUsedByRPDO;
        uint8_t transmissionType;
        uint16_t eventTimer;
    } x1400_RPDOCommunicationParameter;
    struct {
        uint8_t highestSub_indexSupported;
        uint32_t COB_IDUsedByRPDO;
        uint8_t transmissionType;
        uint16_t eventTimer;
    } x1401_RPDOCommunicationParameter;
    struct {
        uint8_t highestSub_indexSupported;
        uint32_t COB_IDUsedByRPDO;
        uint8_t transmissionType;
        uint16_t eventTimer;
    } x1402_RPDOCommunicationParameter;
    struct {
        uint8_t highestSub_indexSupported;
        uint32_t COB_IDUsedByRPDO;
        uint8_t transmissionType;
        uint16_t eventTimer;
    } x1403_RPDOCommunicationParameter;
    struct {
        uint8_t highestSub_indexSupported;
        uint32_t COB_IDUsedByRPDO;
        uint8_t transmissionType;
        uint16_t eventTimer;
    } x1404_RPDOCommunicationParameter;
    struct {
        uint8_t highestSub_indexSupported;
        uint32_t COB_IDUsedByRPDO;
        uint8_t transmissionType;
        uint16_t eventTimer;
    } x1405_RPDOCommunicationParameter;
    struct {
        uint8_t highestSub_indexSupported;
        uint32_t COB_IDUsedByRPDO;
        uint8_t transmissionType;
        uint16_t eventTimer;
    } x1406_RPDOCommunicationParameter;
    struct {
        uint8_t numberOfMappedApplicationObjectsInPDO;
        uint32_t applicationObject1;
        uint32_t applicationObject2;
        uint32_t applicationObject3;
        uint32_t applicationObject4;
        uint32_t applicationObject5;
        uint32_t applicationObject6;
        uint32_t applicationObject7;
        uint32_t applicationObject8;
    } x1600_RPDOMappingParameter;
    struct {
        uint8_t numberOfMappedApplicationObjectsInPDO;
        uint32_t applicationObject1;
        uint32_t applicationObject2;
        uint32_t applicationObject3;
        uint32_t applicationObject4;
        uint32_t applicationObject5;
        uint32_t applicationObject6;
        uint32_t applicationObject7;
        uint32_t applicationObject8;
    } x1601_RPDOMappingParameter;
    struct {
        uint8_t numberOfMappedApplicationObjectsInPDO;
        uint32_t applicationObject1;
        uint32_t applicationObject2;
        uint32_t applicationObject3;
        uint32_t applicationObject4;
        uint32_t applicationObject5;
        uint32_t applicationObject6;
        uint32_t applicationObject7;
        uint32_t applicationObject8;
    } x1602_RPDOMappingParameter;
    struct {
        uint8_t numberOfMappedApplicationObjectsInPDO;
        uint32_t applicationObject1;
        uint32_t applicationObject2;
        uint32_t applicationObject3;
        uint32_t applicationObject4;
        uint32_t applicationObject5;
        uint32_t applicationObject6;
        uint32_t applicationObject7;
        uint32_t applicationObject8;
    } x1603_RPDOMappingParameter;
    struct {
        uint8_t numberOfMappedApplicationObjectsInPDO;
        uint32_t applicationObject1;
        uint32_t applicationObject2;
        uint32_t applicationObject3;
        uint32_t applicationObject4;
        uint32_t applicationObject5;
        uint32_t applicationObject6;
        uint32_t applicationObject7;
        uint32_t applicationObject8;
    } x1604_RPDOMappingParameter;
    struct {
        uint8_t numberOfMappedApplicationObjectsInPDO;
        uint32_t applicationObject1;
        uint32_t applicationObject2;
        uint32_t applicationObject3;
        uint32_t applicationObject4;
        uint32_t applicationObject5;
        uint32_t applicationObject6;
        uint32_t applicationObject7;
        uint32_t applicationObject8;
    } x1605_RPDOMappingParameter;
    struct {
        uint8_t numberOfMappedApplicationObjectsInPDO;
        uint32_t applicationObject1;
        uint32_t applicationObject2;
        uint32_t applicationObject3;
        uint32_t applicationObject4;
        uint32_t applicationObject5;
        uint32_t applicationObject6;
        uint32_t applicationObject7;
        uint32_t applicationObject8;
    } x1606_RPDOMappingParameter;
    struct {
        uint8_t highestSub_indexSupported;
        uint32_t COB_IDUsedByTPDO;
        uint8_t transmissionType;
        uint16_t inhibitTime;
        uint16_t eventTimer;
        uint8_t SYNCStartValue;
    } x1800_TPDOCommunicationParameter;
    struct {
        uint8_t highestSub_indexSupported;
        uint32_t COB_IDUsedByTPDO;
        uint8_t transmissionType;
        uint16_t inhibitTime;
        uint16_t eventTimer;
        uint8_t SYNCStartValue;
    } x1801_TPDOCommunicationParameter;
    struct {
        uint8_t highestSub_indexSupported;
        uint32_t COB_IDUsedByTPDO;
        uint8_t transmissionType;
        uint16_t inhibitTime;
        uint16_t eventTimer;
        uint8_t SYNCStartValue;
    } x1802_TPDOCommunicationParameter;
    struct {
        uint8_t highestSub_indexSupported;
        uint32_t COB_IDUsedByTPDO;
        uint8_t transmissionType;
        uint16_t inhibitTime;
        uint16_t eventTimer;
        uint8_t SYNCStartValue;
    } x1803_TPDOCommunicationParameter;
    struct {
        uint8_t numberOfMappedApplicationObjectsInPDO;
        uint32_t applicationObject1;
        uint32_t applicationObject2;
        uint32_t applicationObject3;
        uint32_t applicationObject4;
        uint32_t applicationObject5;
        uint32_t applicationObject6;
        uint32_t applicationObject7;
        uint32_t applicationObject8;
    } x1A00_TPDOMappingParameter;
    struct {
        uint8_t numberOfMappedApplicationObjectsInPDO;
        uint32_t applicationObject1;
        uint32_t applicationObject2;
        uint32_t applicationObject3;
        uint32_t applicationObject4;
        uint32_t applicationObject5;
        uint32_t applicationObject6;
        uint32_t applicationObject7;
        uint32_t applicationObject8;
    } x1A01_TPDOMappingParameter;
    struct {
        uint8_t numberOfMappedApplicationObjectsInPDO;
        uint32_t applicationObject1;
        uint32_t applicationObject2;
        uint32_t applicationObject3;
        uint32_t applicationObject4;
        uint32_t applicationObject5;
        uint32_t applicationObject6;
        uint32_t applicationObject7;
        uint32_t applicationObject8;
    } x1A02_TPDOMappingParameter;
    struct {
        uint8_t numberOfMappedApplicationObjectsInPDO;
        uint32_t applicationObject1;
        uint32_t applicationObject2;
        uint32_t applicationObject3;
        uint32_t applicationObject4;
        uint32_t applicationObject5;
        uint32_t applicationObject6;
        uint32_t applicationObject7;
        uint32_t applicationObject8;
    } x1A03_TPDOMappingParameter;
    uint8_t x2101_nodeID;
    uint16_t x2102_bitrate;
    uint8_t x2300_schedulerActivates_sub0;
    uint8_t x2300_schedulerActivates[OD_CNT_ARR_2300];
    uint8_t x2301_schedulerOutputValue_sub0;
    uint32_t x2301_schedulerOutputValue[OD_CNT_ARR_2301];
    uint8_t x2302_schedulerOutputAddress_sub0;
    uint32_t x2302_schedulerOutputAddress[OD_CNT_ARR_2302];
    uint8_t x2303_schedulerTime_sub0;
    uint32_t x2303_schedulerTime[OD_CNT_ARR_2303];
    uint8_t x2304_schedulerTimeHour_sub0;
    uint8_t x2304_schedulerTimeHour[OD_CNT_ARR_2304];
    uint8_t x2305_schedulerTimeMinute_sub0;
    uint8_t x2305_schedulerTimeMinute[OD_CNT_ARR_2305];
    uint8_t x4002_debounceFilterMask8Bit_sub0;
    uint8_t x4002_debounceFilterMask8Bit[OD_CNT_ARR_4002];
    uint8_t x4003_debounceTime;
    uint8_t x4004_AC_FilterMask8Bit_sub0;
    uint8_t x4004_AC_FilterMask8Bit[OD_CNT_ARR_4004];
    uint16_t x4005_AC_Time;
    uint8_t x4201_outputPeriod_sub0;
    uint16_t x4201_outputPeriod[OD_CNT_ARR_4201];
    uint8_t x4203_outputImpulseTime_sub0;
    uint16_t x4203_outputImpulseTime[OD_CNT_ARR_4203];
    uint8_t x4401_processAnalogueInput_sub0;
    uint32_t x4401_processAnalogueInput[OD_CNT_ARR_4401];
    uint8_t x4402_multiplierAnalogueInput_sub0;
    int32_t x4402_multiplierAnalogueInput[OD_CNT_ARR_4402];
    uint8_t x4403_dividerAnalogueInput_sub0;
    int32_t x4403_dividerAnalogueInput[OD_CNT_ARR_4403];
    uint8_t x4501_WM_Setting_sub0;
    int16_t x4501_WM_Setting[OD_CNT_ARR_4501];
    uint8_t x4502_WM_AngleStart_sub0;
    int16_t x4502_WM_AngleStart[OD_CNT_ARR_4502];
    uint8_t x4503_WM_AngleStop_sub0;
    int16_t x4503_WM_AngleStop[OD_CNT_ARR_4503];
    uint8_t x4504_WM_Speed_sub0;
    int16_t x4504_WM_Speed[OD_CNT_ARR_4504];
    uint8_t x4510_userSettings_sub0;
    uint8_t x4510_userSettings[OD_CNT_ARR_4510];
    uint8_t x5204_outputDuty_sub0;
    uint8_t x5204_outputDuty[OD_CNT_ARR_5204];
    uint8_t x5205_outputImpilse_sub0;
    uint8_t x5205_outputImpilse[OD_CNT_ARR_5205];
    uint8_t x5301_outputMask_sub0;
    uint32_t x5301_outputMask[OD_CNT_ARR_5301];
    uint8_t x5302_inputRegisterAddresses_sub0;
    uint32_t x5302_inputRegisterAddresses[OD_CNT_ARR_5302];
    uint8_t x5303_inputValueMasks_sub0;
    uint32_t x5303_inputValueMasks[OD_CNT_ARR_5303];
    uint8_t x5304_inputValuePolarity_sub0;
    uint32_t x5304_inputValuePolarity[OD_CNT_ARR_5304];
    uint8_t x5401_inputRegisterAddresses_sub0;
    uint32_t x5401_inputRegisterAddresses[OD_CNT_ARR_5401];
    uint8_t x5402_inputRegisterMasks_sub0;
    uint32_t x5402_inputRegisterMasks[OD_CNT_ARR_5402];
    uint8_t x5403_inputRegisterPolarity_sub0;
    uint32_t x5403_inputRegisterPolarity[OD_CNT_ARR_5403];
    uint8_t x5404_outputRegisterAddresses_sub0;
    uint32_t x5404_outputRegisterAddresses[OD_CNT_ARR_5404];
    uint8_t x5405_outputValues_sub0;
    uint32_t x5405_outputValues[OD_CNT_ARR_5405];
    uint8_t x5406_ruleMode_sub0;
    uint32_t x5406_ruleMode[OD_CNT_ARR_5406];
    uint8_t x6002_polarityInput8Bit_sub0;
    uint8_t x6002_polarityInput8Bit[OD_CNT_ARR_6002];
    uint8_t x6003_filterConstantInput8Bit_sub0;
    uint8_t x6003_filterConstantInput8Bit[OD_CNT_ARR_6003];
    bool_t x6005_globalInterruptEnable;
    uint8_t x6006_interruptMaskAnyChange8Bit_sub0;
    uint8_t x6006_interruptMaskAnyChange8Bit[OD_CNT_ARR_6006];
    uint8_t x6007_interruptMaskLowToHigh8Bit_sub0;
    uint8_t x6007_interruptMaskLowToHigh8Bit[OD_CNT_ARR_6007];
    uint8_t x6008_interruptMaskHighToLow8Bit_sub0;
    uint8_t x6008_interruptMaskHighToLow8Bit[OD_CNT_ARR_6008];
    uint8_t x6202_polarityOutput8Bit_sub0;
    uint8_t x6202_polarityOutput8Bit[OD_CNT_ARR_6202];
    uint8_t x6208_filterMaskOutput8Bit_sub0;
    uint8_t x6208_filterMaskOutput8Bit[OD_CNT_ARR_6208];
    uint8_t x6421_interruptTriggerSelection_sub0;
    uint8_t x6421_interruptTriggerSelection[OD_CNT_ARR_6421];
    bool_t x6423_analogInputGlobalInterruptEnable;
    uint8_t x6424_analogInputUpperLimit_sub0;
    int32_t x6424_analogInputUpperLimit[OD_CNT_ARR_6424];
    uint8_t x6425_analogInputLowerLimit_sub0;
    int32_t x6425_analogInputLowerLimit[OD_CNT_ARR_6425];
    uint8_t x6426_analogInputDelta_sub0;
    int32_t x6426_analogInputDelta[OD_CNT_ARR_6426];
    uint8_t x6427_analogInputDeltaNegative_sub0;
    int32_t x6427_analogInputDeltaNegative[OD_CNT_ARR_6427];
    uint8_t x6428_analogInputDeltaPositive_sub0;
    int32_t x6428_analogInputDeltaPositive[OD_CNT_ARR_6428];
    uint8_t x6429_analogInputTriggers_sub0;
    uint32_t x6429_analogInputTriggers[OD_CNT_ARR_6429];
    uint8_t x6431_analogInputCompensate_sub0;
    int32_t x6431_analogInputCompensate[OD_CNT_ARR_6431];
    uint8_t x6443_analogueOutputErrorMode_sub0;
    uint8_t x6443_analogueOutputErrorMode[OD_CNT_ARR_6443];
} OD_PERSIST_COMM_t;

typedef struct {
    uint8_t x1001_errorRegister;
    uint8_t x1010_storeParameters_sub0;
    uint32_t x1010_storeParameters[OD_CNT_ARR_1010];
    uint8_t x1011_restoreDefaultParameters_sub0;
    uint32_t x1011_restoreDefaultParameters[OD_CNT_ARR_1011];
    struct {
        uint8_t highestSub_indexSupported;
        uint32_t COB_IDClientToServerRx;
        uint32_t COB_IDServerToClientTx;
    } x1200_SDOServerParameter;
    uint16_t x4500_LCD;
    uint8_t x5000_interrupt8bit_sub0;
    uint8_t x5000_interrupt8bit[OD_CNT_ARR_5000];
    uint8_t x5006_interruptAnyChange8Bitt_sub0;
    uint8_t x5006_interruptAnyChange8Bitt[OD_CNT_ARR_5006];
    uint8_t x5007_interruptLowToHigh8Bit_sub0;
    uint8_t x5007_interruptLowToHigh8Bit[OD_CNT_ARR_5007];
    uint8_t x5008_interruptHighToLow8Bit_sub0;
    uint8_t x5008_interruptHighToLow8Bit[OD_CNT_ARR_5008];
    uint8_t x5100_readValue8bit_sub0;
    uint8_t x5100_readValue8bit[OD_CNT_ARR_5100];
    uint8_t x5101_inputOff8bit_sub0;
    uint8_t x5101_inputOff8bit[OD_CNT_ARR_5101];
    uint8_t x5102_inputOn8bit_sub0;
    uint8_t x5102_inputOn8bit[OD_CNT_ARR_5102];
    uint8_t x5103_inputSwitch8bit_sub0;
    uint8_t x5103_inputSwitch8bit[OD_CNT_ARR_5103];
    uint8_t x5201_writeOffOutput8Bit_sub0;
    uint8_t x5201_writeOffOutput8Bit[OD_CNT_ARR_5201];
    uint8_t x5202_writeOnOutput8Bit_sub0;
    uint8_t x5202_writeOnOutput8Bit[OD_CNT_ARR_5202];
    uint8_t x5203_writeSwitchOutput8Bit_sub0;
    uint8_t x5203_writeSwitchOutput8Bit[OD_CNT_ARR_5203];
    uint8_t x6000_readInput8Bit_sub0;
    uint8_t x6000_readInput8Bit[OD_CNT_ARR_6000];
    uint8_t x6100_readValue16Bit_sub0;
    uint16_t x6100_readValue16Bit[OD_CNT_ARR_6100];
    uint8_t x6200_writeOutput8Bit_sub0;
    uint8_t x6200_writeOutput8Bit[OD_CNT_ARR_6200];
    uint8_t x6206_errorModeOutput8Bit_sub0;
    uint8_t x6206_errorModeOutput8Bit[OD_CNT_ARR_6206];
    uint8_t x6207_errorValueOutput8Bit_sub0;
    uint8_t x6207_errorValueOutput8Bit[OD_CNT_ARR_6207];
    uint8_t x6401_readAnalogueInput16Bit_sub0;
    int16_t x6401_readAnalogueInput16Bit[OD_CNT_ARR_6401];
    uint8_t x6402_readAnalogueInput32Bit_sub0;
    int32_t x6402_readAnalogueInput32Bit[OD_CNT_ARR_6402];
    uint8_t x6411_writeAnalogueOutput16Bit_sub0;
    int16_t x6411_writeAnalogueOutput16Bit[OD_CNT_ARR_6411];
    uint8_t x6444_analogueOutputErrorValueInteger_sub0;
    int32_t x6444_analogueOutputErrorValueInteger[OD_CNT_ARR_6444];
    uint8_t xA040_userObjectA040_sub0;
    uint8_t xA040_userObjectA040[OD_CNT_ARR_A040];
    uint8_t xA4C0_userObjectA4C0_sub0;
    uint8_t xA4C0_userObjectA4C0[OD_CNT_ARR_A4C0];
} OD_RAM_t;

typedef struct {
    uint8_t x2000_userEEPROM_sub0;
    uint8_t x2000_userEEPROM[OD_CNT_ARR_2000];
} OD_EEPROM_t;

#ifndef OD_ATTR_PERSIST_COMM
#define OD_ATTR_PERSIST_COMM
#endif
extern OD_ATTR_PERSIST_COMM OD_PERSIST_COMM_t OD_PERSIST_COMM;

#ifndef OD_ATTR_RAM
#define OD_ATTR_RAM
#endif
extern OD_ATTR_RAM OD_RAM_t OD_RAM;

#ifndef OD_ATTR_EEPROM
#define OD_ATTR_EEPROM
#endif
extern OD_ATTR_EEPROM OD_EEPROM_t OD_EEPROM;

#ifndef OD_ATTR_OD
#define OD_ATTR_OD
#endif
extern OD_ATTR_OD OD_t *OD;


/*******************************************************************************
    Object dictionary entries - shortcuts
*******************************************************************************/
#define OD_ENTRY_H1000 &OD->list[0]
#define OD_ENTRY_H1001 &OD->list[1]
#define OD_ENTRY_H1003 &OD->list[2]
#define OD_ENTRY_H1005 &OD->list[3]
#define OD_ENTRY_H1006 &OD->list[4]
#define OD_ENTRY_H1007 &OD->list[5]
#define OD_ENTRY_H1008 &OD->list[6]
#define OD_ENTRY_H100A &OD->list[7]
#define OD_ENTRY_H1010 &OD->list[8]
#define OD_ENTRY_H1011 &OD->list[9]
#define OD_ENTRY_H1012 &OD->list[10]
#define OD_ENTRY_H1014 &OD->list[11]
#define OD_ENTRY_H1015 &OD->list[12]
#define OD_ENTRY_H1016 &OD->list[13]
#define OD_ENTRY_H1017 &OD->list[14]
#define OD_ENTRY_H1018 &OD->list[15]
#define OD_ENTRY_H1019 &OD->list[16]
#define OD_ENTRY_H1200 &OD->list[17]
#define OD_ENTRY_H1400 &OD->list[18]
#define OD_ENTRY_H1401 &OD->list[19]
#define OD_ENTRY_H1402 &OD->list[20]
#define OD_ENTRY_H1403 &OD->list[21]
#define OD_ENTRY_H1404 &OD->list[22]
#define OD_ENTRY_H1405 &OD->list[23]
#define OD_ENTRY_H1406 &OD->list[24]
#define OD_ENTRY_H1600 &OD->list[25]
#define OD_ENTRY_H1601 &OD->list[26]
#define OD_ENTRY_H1602 &OD->list[27]
#define OD_ENTRY_H1603 &OD->list[28]
#define OD_ENTRY_H1604 &OD->list[29]
#define OD_ENTRY_H1605 &OD->list[30]
#define OD_ENTRY_H1606 &OD->list[31]
#define OD_ENTRY_H1800 &OD->list[32]
#define OD_ENTRY_H1801 &OD->list[33]
#define OD_ENTRY_H1802 &OD->list[34]
#define OD_ENTRY_H1803 &OD->list[35]
#define OD_ENTRY_H1A00 &OD->list[36]
#define OD_ENTRY_H1A01 &OD->list[37]
#define OD_ENTRY_H1A02 &OD->list[38]
#define OD_ENTRY_H1A03 &OD->list[39]
#define OD_ENTRY_H2000 &OD->list[40]
#define OD_ENTRY_H2101 &OD->list[41]
#define OD_ENTRY_H2102 &OD->list[42]
#define OD_ENTRY_H2200 &OD->list[43]
#define OD_ENTRY_H2300 &OD->list[44]
#define OD_ENTRY_H2301 &OD->list[45]
#define OD_ENTRY_H2302 &OD->list[46]
#define OD_ENTRY_H2303 &OD->list[47]
#define OD_ENTRY_H2304 &OD->list[48]
#define OD_ENTRY_H2305 &OD->list[49]
#define OD_ENTRY_H4002 &OD->list[50]
#define OD_ENTRY_H4003 &OD->list[51]
#define OD_ENTRY_H4004 &OD->list[52]
#define OD_ENTRY_H4005 &OD->list[53]
#define OD_ENTRY_H4201 &OD->list[54]
#define OD_ENTRY_H4203 &OD->list[55]
#define OD_ENTRY_H4401 &OD->list[56]
#define OD_ENTRY_H4402 &OD->list[57]
#define OD_ENTRY_H4403 &OD->list[58]
#define OD_ENTRY_H4500 &OD->list[59]
#define OD_ENTRY_H4501 &OD->list[60]
#define OD_ENTRY_H4502 &OD->list[61]
#define OD_ENTRY_H4503 &OD->list[62]
#define OD_ENTRY_H4504 &OD->list[63]
#define OD_ENTRY_H4510 &OD->list[64]
#define OD_ENTRY_H5000 &OD->list[65]
#define OD_ENTRY_H5006 &OD->list[66]
#define OD_ENTRY_H5007 &OD->list[67]
#define OD_ENTRY_H5008 &OD->list[68]
#define OD_ENTRY_H5100 &OD->list[69]
#define OD_ENTRY_H5101 &OD->list[70]
#define OD_ENTRY_H5102 &OD->list[71]
#define OD_ENTRY_H5103 &OD->list[72]
#define OD_ENTRY_H5201 &OD->list[73]
#define OD_ENTRY_H5202 &OD->list[74]
#define OD_ENTRY_H5203 &OD->list[75]
#define OD_ENTRY_H5204 &OD->list[76]
#define OD_ENTRY_H5205 &OD->list[77]
#define OD_ENTRY_H5301 &OD->list[78]
#define OD_ENTRY_H5302 &OD->list[79]
#define OD_ENTRY_H5303 &OD->list[80]
#define OD_ENTRY_H5304 &OD->list[81]
#define OD_ENTRY_H5401 &OD->list[82]
#define OD_ENTRY_H5402 &OD->list[83]
#define OD_ENTRY_H5403 &OD->list[84]
#define OD_ENTRY_H5404 &OD->list[85]
#define OD_ENTRY_H5405 &OD->list[86]
#define OD_ENTRY_H5406 &OD->list[87]
#define OD_ENTRY_H6000 &OD->list[88]
#define OD_ENTRY_H6002 &OD->list[89]
#define OD_ENTRY_H6003 &OD->list[90]
#define OD_ENTRY_H6005 &OD->list[91]
#define OD_ENTRY_H6006 &OD->list[92]
#define OD_ENTRY_H6007 &OD->list[93]
#define OD_ENTRY_H6008 &OD->list[94]
#define OD_ENTRY_H6100 &OD->list[95]
#define OD_ENTRY_H6200 &OD->list[96]
#define OD_ENTRY_H6202 &OD->list[97]
#define OD_ENTRY_H6206 &OD->list[98]
#define OD_ENTRY_H6207 &OD->list[99]
#define OD_ENTRY_H6208 &OD->list[100]
#define OD_ENTRY_H6401 &OD->list[101]
#define OD_ENTRY_H6402 &OD->list[102]
#define OD_ENTRY_H6411 &OD->list[103]
#define OD_ENTRY_H6421 &OD->list[104]
#define OD_ENTRY_H6423 &OD->list[105]
#define OD_ENTRY_H6424 &OD->list[106]
#define OD_ENTRY_H6425 &OD->list[107]
#define OD_ENTRY_H6426 &OD->list[108]
#define OD_ENTRY_H6427 &OD->list[109]
#define OD_ENTRY_H6428 &OD->list[110]
#define OD_ENTRY_H6429 &OD->list[111]
#define OD_ENTRY_H6431 &OD->list[112]
#define OD_ENTRY_H6443 &OD->list[113]
#define OD_ENTRY_H6444 &OD->list[114]
#define OD_ENTRY_HA040 &OD->list[115]
#define OD_ENTRY_HA4C0 &OD->list[116]


/*******************************************************************************
    Object dictionary entries - shortcuts with names
*******************************************************************************/
#define OD_ENTRY_H1000_deviceType &OD->list[0]
#define OD_ENTRY_H1001_errorRegister &OD->list[1]
#define OD_ENTRY_H1003_pre_definedErrorField &OD->list[2]
#define OD_ENTRY_H1005_COB_ID_SYNCMessage &OD->list[3]
#define OD_ENTRY_H1006_communicationCyclePeriod &OD->list[4]
#define OD_ENTRY_H1007_synchronousWindowLength &OD->list[5]
#define OD_ENTRY_H1008_manufacturerDeviceName &OD->list[6]
#define OD_ENTRY_H100A_manufacturerSoftwareVersion &OD->list[7]
#define OD_ENTRY_H1010_storeParameters &OD->list[8]
#define OD_ENTRY_H1011_restoreDefaultParameters &OD->list[9]
#define OD_ENTRY_H1012_COB_IDTimeStampObject &OD->list[10]
#define OD_ENTRY_H1014_COB_ID_EMCY &OD->list[11]
#define OD_ENTRY_H1015_inhibitTimeEMCY &OD->list[12]
#define OD_ENTRY_H1016_consumerHeartbeatTime &OD->list[13]
#define OD_ENTRY_H1017_producerHeartbeatTime &OD->list[14]
#define OD_ENTRY_H1018_identity &OD->list[15]
#define OD_ENTRY_H1019_synchronousCounterOverflowValue &OD->list[16]
#define OD_ENTRY_H1200_SDOServerParameter &OD->list[17]
#define OD_ENTRY_H1400_RPDOCommunicationParameter &OD->list[18]
#define OD_ENTRY_H1401_RPDOCommunicationParameter &OD->list[19]
#define OD_ENTRY_H1402_RPDOCommunicationParameter &OD->list[20]
#define OD_ENTRY_H1403_RPDOCommunicationParameter &OD->list[21]
#define OD_ENTRY_H1404_RPDOCommunicationParameter &OD->list[22]
#define OD_ENTRY_H1405_RPDOCommunicationParameter &OD->list[23]
#define OD_ENTRY_H1406_RPDOCommunicationParameter &OD->list[24]
#define OD_ENTRY_H1600_RPDOMappingParameter &OD->list[25]
#define OD_ENTRY_H1601_RPDOMappingParameter &OD->list[26]
#define OD_ENTRY_H1602_RPDOMappingParameter &OD->list[27]
#define OD_ENTRY_H1603_RPDOMappingParameter &OD->list[28]
#define OD_ENTRY_H1604_RPDOMappingParameter &OD->list[29]
#define OD_ENTRY_H1605_RPDOMappingParameter &OD->list[30]
#define OD_ENTRY_H1606_RPDOMappingParameter &OD->list[31]
#define OD_ENTRY_H1800_TPDOCommunicationParameter &OD->list[32]
#define OD_ENTRY_H1801_TPDOCommunicationParameter &OD->list[33]
#define OD_ENTRY_H1802_TPDOCommunicationParameter &OD->list[34]
#define OD_ENTRY_H1803_TPDOCommunicationParameter &OD->list[35]
#define OD_ENTRY_H1A00_TPDOMappingParameter &OD->list[36]
#define OD_ENTRY_H1A01_TPDOMappingParameter &OD->list[37]
#define OD_ENTRY_H1A02_TPDOMappingParameter &OD->list[38]
#define OD_ENTRY_H1A03_TPDOMappingParameter &OD->list[39]
#define OD_ENTRY_H2000_userEEPROM &OD->list[40]
#define OD_ENTRY_H2101_nodeID &OD->list[41]
#define OD_ENTRY_H2102_bitrate &OD->list[42]
#define OD_ENTRY_H2200_domainUpload &OD->list[43]
#define OD_ENTRY_H2300_schedulerActivates &OD->list[44]
#define OD_ENTRY_H2301_schedulerOutputValue &OD->list[45]
#define OD_ENTRY_H2302_schedulerOutputAddress &OD->list[46]
#define OD_ENTRY_H2303_schedulerTime &OD->list[47]
#define OD_ENTRY_H2304_schedulerTimeHour &OD->list[48]
#define OD_ENTRY_H2305_schedulerTimeMinute &OD->list[49]
#define OD_ENTRY_H4002_debounceFilterMask8Bit &OD->list[50]
#define OD_ENTRY_H4003_debounceTime &OD->list[51]
#define OD_ENTRY_H4004_AC_FilterMask8Bit &OD->list[52]
#define OD_ENTRY_H4005_AC_Time &OD->list[53]
#define OD_ENTRY_H4201_outputPeriod &OD->list[54]
#define OD_ENTRY_H4203_outputImpulseTime &OD->list[55]
#define OD_ENTRY_H4401_processAnalogueInput &OD->list[56]
#define OD_ENTRY_H4402_multiplierAnalogueInput &OD->list[57]
#define OD_ENTRY_H4403_dividerAnalogueInput &OD->list[58]
#define OD_ENTRY_H4500_LCD &OD->list[59]
#define OD_ENTRY_H4501_WM_Setting &OD->list[60]
#define OD_ENTRY_H4502_WM_AngleStart &OD->list[61]
#define OD_ENTRY_H4503_WM_AngleStop &OD->list[62]
#define OD_ENTRY_H4504_WM_Speed &OD->list[63]
#define OD_ENTRY_H4510_userSettings &OD->list[64]
#define OD_ENTRY_H5000_interrupt8bit &OD->list[65]
#define OD_ENTRY_H5006_interruptAnyChange8Bitt &OD->list[66]
#define OD_ENTRY_H5007_interruptLowToHigh8Bit &OD->list[67]
#define OD_ENTRY_H5008_interruptHighToLow8Bit &OD->list[68]
#define OD_ENTRY_H5100_readValue8bit &OD->list[69]
#define OD_ENTRY_H5101_inputOff8bit &OD->list[70]
#define OD_ENTRY_H5102_inputOn8bit &OD->list[71]
#define OD_ENTRY_H5103_inputSwitch8bit &OD->list[72]
#define OD_ENTRY_H5201_writeOffOutput8Bit &OD->list[73]
#define OD_ENTRY_H5202_writeOnOutput8Bit &OD->list[74]
#define OD_ENTRY_H5203_writeSwitchOutput8Bit &OD->list[75]
#define OD_ENTRY_H5204_outputDuty &OD->list[76]
#define OD_ENTRY_H5205_outputImpilse &OD->list[77]
#define OD_ENTRY_H5301_outputMask &OD->list[78]
#define OD_ENTRY_H5302_inputRegisterAddresses &OD->list[79]
#define OD_ENTRY_H5303_inputValueMasks &OD->list[80]
#define OD_ENTRY_H5304_inputValuePolarity &OD->list[81]
#define OD_ENTRY_H5401_inputRegisterAddresses &OD->list[82]
#define OD_ENTRY_H5402_inputRegisterMasks &OD->list[83]
#define OD_ENTRY_H5403_inputRegisterPolarity &OD->list[84]
#define OD_ENTRY_H5404_outputRegisterAddresses &OD->list[85]
#define OD_ENTRY_H5405_outputValues &OD->list[86]
#define OD_ENTRY_H5406_ruleMode &OD->list[87]
#define OD_ENTRY_H6000_readInput8Bit &OD->list[88]
#define OD_ENTRY_H6002_polarityInput8Bit &OD->list[89]
#define OD_ENTRY_H6003_filterConstantInput8Bit &OD->list[90]
#define OD_ENTRY_H6005_globalInterruptEnable &OD->list[91]
#define OD_ENTRY_H6006_interruptMaskAnyChange8Bit &OD->list[92]
#define OD_ENTRY_H6007_interruptMaskLowToHigh8Bit &OD->list[93]
#define OD_ENTRY_H6008_interruptMaskHighToLow8Bit &OD->list[94]
#define OD_ENTRY_H6100_readValue16Bit &OD->list[95]
#define OD_ENTRY_H6200_writeOutput8Bit &OD->list[96]
#define OD_ENTRY_H6202_polarityOutput8Bit &OD->list[97]
#define OD_ENTRY_H6206_errorModeOutput8Bit &OD->list[98]
#define OD_ENTRY_H6207_errorValueOutput8Bit &OD->list[99]
#define OD_ENTRY_H6208_filterMaskOutput8Bit &OD->list[100]
#define OD_ENTRY_H6401_readAnalogueInput16Bit &OD->list[101]
#define OD_ENTRY_H6402_readAnalogueInput32Bit &OD->list[102]
#define OD_ENTRY_H6411_writeAnalogueOutput16Bit &OD->list[103]
#define OD_ENTRY_H6421_interruptTriggerSelection &OD->list[104]
#define OD_ENTRY_H6423_analogInputGlobalInterruptEnable &OD->list[105]
#define OD_ENTRY_H6424_analogInputUpperLimit &OD->list[106]
#define OD_ENTRY_H6425_analogInputLowerLimit &OD->list[107]
#define OD_ENTRY_H6426_analogInputDelta &OD->list[108]
#define OD_ENTRY_H6427_analogInputDeltaNegative &OD->list[109]
#define OD_ENTRY_H6428_analogInputDeltaPositive &OD->list[110]
#define OD_ENTRY_H6429_analogInputTriggers &OD->list[111]
#define OD_ENTRY_H6431_analogInputCompensate &OD->list[112]
#define OD_ENTRY_H6443_analogueOutputErrorMode &OD->list[113]
#define OD_ENTRY_H6444_analogueOutputErrorValueInteger &OD->list[114]
#define OD_ENTRY_HA040_userObjectA040 &OD->list[115]
#define OD_ENTRY_HA4C0_userObjectA4C0 &OD->list[116]


/*******************************************************************************
    OD config structure
*******************************************************************************/
#ifdef CO_MULTIPLE_OD
#define OD_INIT_CONFIG(config) {\
    (config).CNT_NMT = OD_CNT_NMT;\
    (config).ENTRY_H1017 = OD_ENTRY_H1017;\
    (config).CNT_HB_CONS = OD_CNT_HB_CONS;\
    (config).CNT_ARR_1016 = OD_CNT_ARR_1016;\
    (config).ENTRY_H1016 = OD_ENTRY_H1016;\
    (config).CNT_EM = OD_CNT_EM;\
    (config).ENTRY_H1001 = OD_ENTRY_H1001;\
    (config).ENTRY_H1014 = OD_ENTRY_H1014;\
    (config).ENTRY_H1015 = OD_ENTRY_H1015;\
    (config).CNT_ARR_1003 = OD_CNT_ARR_1003;\
    (config).ENTRY_H1003 = OD_ENTRY_H1003;\
    (config).CNT_SDO_SRV = OD_CNT_SDO_SRV;\
    (config).ENTRY_H1200 = OD_ENTRY_H1200;\
    (config).CNT_SDO_CLI = 0;\
    (config).ENTRY_H1280 = OD_ENTRY_H1280;\
    (config).CNT_TIME = OD_CNT_TIME;\
    (config).ENTRY_H1012 = OD_ENTRY_H1012;\
    (config).CNT_SYNC = OD_CNT_SYNC;\
    (config).ENTRY_H1005 = OD_ENTRY_H1005;\
    (config).ENTRY_H1006 = OD_ENTRY_H1006;\
    (config).ENTRY_H1007 = OD_ENTRY_H1007;\
    (config).ENTRY_H1019 = OD_ENTRY_H1019;\
    (config).CNT_RPDO = OD_CNT_RPDO;\
    (config).ENTRY_H1400 = OD_ENTRY_H1400;\
    (config).ENTRY_H1600 = OD_ENTRY_H1600;\
    (config).CNT_TPDO = OD_CNT_TPDO;\
    (config).ENTRY_H1800 = OD_ENTRY_H1800;\
    (config).ENTRY_H1A00 = OD_ENTRY_H1A00;\
    (config).CNT_LEDS = 0;\
    (config).CNT_GFC = 0;\
    (config).ENTRY_H1300 = NULL;\
    (config).CNT_SRDO = 0;\
    (config).ENTRY_H1301 = NULL;\
    (config).ENTRY_H1381 = NULL;\
    (config).ENTRY_H13FE = NULL;\
    (config).ENTRY_H13FF = NULL;\
    (config).CNT_LSS_SLV = 0;\
    (config).CNT_LSS_MST = 0;\
    (config).CNT_GTWA = 0;\
    (config).CNT_TRACE = 0;\
}
#endif

#endif /* OD_H */
